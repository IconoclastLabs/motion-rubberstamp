{"name":"Motion-rubberstamp","tagline":"Create an overlay of your iOS app icon with version info and current git info for development and testing purposes.","body":"![motion-rubberstamp](https://s3.amazonaws.com/iconoclastweb/github/motion-rubberstamp/logo_200.png \"motion-rubberstamp\")\r\n#### 1. Just add this gem to your RubyMotion project, and your app icons will get stamped!\r\n\r\n\r\nApp Icon _Before_\r\n\r\n![Before motion-rubberstamp](https://s3.amazonaws.com/iconoclastweb/github/icon_before.png \"Before motion-rubberstamp\")\r\n\r\n\r\nApp Icon _After_\r\n\r\n![After motion-rubberstamp](https://s3.amazonaws.com/iconoclastweb/github/icon_after.png \"After motion-rubberstamp\")\r\n\r\n#### 2. If you don't have an icon, we will automatically provide one.\r\n![Free Icon](https://s3.amazonaws.com/iconoclastweb/github/free.png \"Free Rubberstamp Icon\")\r\n\r\n#### 3. Removal\r\nThis gem will intelligently omit itself from your archive builds, but you can also do it manually via rake.\r\n\r\n    $ rake rubberstamp:revert\r\n\r\n#### 4. TADAAA!\r\nThis is aimed at being a development tool, it will create an\r\noverlay for your iOS app icon that includes your version, commit\r\nand branch information so you can know exactly what version of\r\nyour app is running on your device, or so that beta testers can\r\neasily report which version they are running. If your icons don't\r\nneed to be updated, the motion-rubberstamp won't do anything.\r\n\r\n## Installation\r\n\r\n### Gemfile Install\r\nAdd this line to your RubyMotion app's [Gemfile](http://gembundler.com/v1.3/rubymotion.html):\r\n\r\n    gem 'motion-rubberstamp'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\n### Manual Install\r\nOr install it manually as:\r\n\r\n    $ gem install motion-rubberstamp\r\n\r\nand add to your RubyMotion app's Rakefile\r\n\r\n    require 'motion-rubberstamp'\r\n\r\n### Dependencies\r\nThis gem also relies on imagemagick and ghostscript, which\r\ncan easily be installed via [Homebrew](http://mxcl.github.io/homebrew/):\r\n\r\n    $ brew install imagemagick\r\n\r\n    $ brew install ghostscript\r\n\r\n## Usage\r\n\r\n#### Installing the Gem is all that's needed to get started.\r\nMotion-rubberstamp adds itself to the build process, so whenever you run `rake` or `rake device` it will\r\nautomatically invoke `rake rubberstamp:run` beforehand.\r\n\r\n_Smart Cleanup:_ When you run `rake archive` or `rake archive:distribution`, motion-rubberstamp will automatically invoke\r\n`rake rubberstamp:revert`. This means that development builds will now automatically receive overlays and\r\nrelease builds will use your original icons.\r\n\r\n## Rake Tasks\r\n\r\nYou can also manually invoke motion-rubberstamp at any time with:\r\n\r\n    $ rake rubberstamp:run\r\n\r\nOr to remove the overlays and restore your original icons, you can run\r\n\r\n    $ rake rubberstamp:revert\r\n\r\n## Notes\r\n\r\nThe iOS Simulator is trying to cache your app icons. For this reason we've put in a significant step that\r\nwill refresh your simulator automatically by closing it, should the stamps be updated.  This is a small but notable necessary evil.\r\nour build detects that it needs to restamp.  It's a small but notable necessary evil.\r\n\r\nMotion-rubberstamp _currently_ only checks for app icons in the `/resources`\r\npath, regardless of what your Rakefile is configured for.\r\n\r\nMotion-rubberstamp will only run if your version or git information has changed to prevent invoking\r\nImageMagick and pals more than necessary.\r\n\r\n## Uninstall\r\n#### Bye?\r\nRubberstamp will not stamp your archive/production apps.  No need to leave us like that!  But if you must...\r\n\r\nTo uninstall, simply run `rake rubberstamp:revert` to restore your original icons, then\r\ndelete motion-rubberstamp from your gemfile or rakefile.\r\n\r\n#### Changing Icons?\r\nIf you have our starter icon, or you've changed your mind on your icon it's easy to switch!\r\nRun `rake rubberstamp:revert` and then copy in your new icons to your resource folder.\r\n\r\n## Contributing\r\n\r\nI've probably made the file management more difficult and rigid than it needs to be, and I have no\r\nclue how to write tests for this. But I'll gladly accept any help that's offered.\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Thanks\r\n\r\nAs brought to our attention, this was also done by [Clay's Allsopp!](https://github.com/clayallsopp/motion-smarticons), in a most\r\nelegant solution!  We're hoping to continue progressing this gem to make sure it is useful and provides a wide array of\r\nutility regardless :)\r\n\r\nMany thanks to Krzysztof Zab≈Çocki and Evan Doll for the idea and\r\nimplementation\r\n[details](http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}